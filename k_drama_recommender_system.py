# -*- coding: utf-8 -*-
"""k_drama recommender system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yiLMx58-oYfjm7G_vsGsaKJlPNAWNeqz
"""

import pandas as pd
import numpy as np

dramas=pd.read_csv("/content/kdrama_list_with_tmdb_ids.zip")

dramas.head()

dramas.shape

dramas.info()

dramas.columns

dramas.Genre

dramas.isnull()

dramas.isnull().sum()

dramas.dropna(inplace=True)

dramas.duplicated().sum()

dramas.iloc[0].Genre

dramas.head()

dramas['Main Cast'][0]

new_df=dramas[['tmdb_id','Name','Tags']]

new_df

new_df['Tags'][0]

new_df['Tags']=new_df['Tags'].apply(lambda x:x.lower())

new_df.head()

new_df['Tags'][0]

new_df['Tags'][1]



import nltk



from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()



def stem(text):
  y=[]
  for i in text.split():
      y.append(ps.stem(i))
  return " ".join(y)



new_df['Tags']=new_df['Tags'].apply(stem)



new_df['Tags'][0]

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=5000,stop_words='english')

cv.fit_transform(new_df['Tags']).toarray()

cv.fit_transform(new_df['Tags']).toarray().shape

vectors=cv.fit_transform(new_df['Tags']).toarray()

vectors

vectors[0]

from sklearn.metrics.pairwise import cosine_similarity

similarity=cosine_similarity(vectors)

similarity[0
           ]

def recommend(dramas):
  return

new_df[new_df['Name']=='Bulgasal: Immortal Souls'].index[0]

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity


def recommend(drama_name, dramas, n_recommendations=5):
    tfidf = TfidfVectorizer(stop_words='english')

    dramas['Name'] = dramas['Name'].fillna('')

    tfidf_matrix = tfidf.fit_transform(dramas['Name'])

    try:
        idx = dramas[dramas['Name'].str.contains(drama_name, case=False, regex=False)].index[0]
    except IndexError:
        return "Drama not found. Please try with a different name."

    cosine_sim = cosine_similarity(tfidf_matrix[idx], tfidf_matrix).flatten()

    similar_indices = cosine_sim.argsort()[-n_recommendations - 1:-1][::-1]

    recommended_dramas = dramas['Name'].iloc[similar_indices]

    return recommended_dramas
# Example: recommend based on the title "Mother"
recommendations = recommend('Mother', dramas)
print(recommendations)

recommendations = recommend('Mother', dramas)
print(recommendations)

recommendations = recommend('Goblin', dramas)
print(recommendations)

new_df



import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity


def recommend(drama_name, dramas, n_recommendations=5):
    tfidf = TfidfVectorizer(stop_words='english')

    dramas['Name'] = dramas['Name'].fillna('')

    tfidf_matrix = tfidf.fit_transform(dramas['Name'])

    try:
        idx = dramas[dramas['Name'].str.contains(drama_name, case=False, regex=False)].index[0]
    except IndexError:
        return "Drama not found. Please try with a different name."

    cosine_sim = cosine_similarity(tfidf_matrix[idx], tfidf_matrix).flatten()

    similar_indices = cosine_sim.argsort()[-n_recommendations - 1:-1][::-1]

    recommended_dramas = dramas['Name'].iloc[similar_indices]

    return recommended_dramas

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def recommend(drama_name, dramas, n_recommendations=5):

    tfidf = TfidfVectorizer(stop_words='english')


    dramas['Name'] = dramas['Name'].fillna('')


    tfidf_matrix = tfidf.fit_transform(dramas['Name'])


    try:
        idx = dramas[dramas['Name'].str.contains(drama_name, case=False, regex=False)].index[0]
    except IndexError:
        return "Drama not found. Please try with a different name."


    cosine_sim = cosine_similarity(tfidf_matrix[idx], tfidf_matrix).flatten()


    similar_indices = cosine_sim.argsort()[-n_recommendations:]  # Include the input drama


    recommended_dramas = dramas['Name'].iloc[similar_indices].iloc[::-1]  # Reverse to keep input drama first

    return recommended_dramas


recommendations = recommend('Mother', dramas)
print(recommendations)

recommendations = recommend('True Beauty', dramas)
print(recommendations)

pip install tmdbv3api

new_df.head(20

)

dramas.tmdb_id

import pickle

pickle.dump(new_df,open('dramas.pkl','wb'))

new_df['Name'].values

new_df.to_dict()



pickle.dump(new_df.to_dict(),open('dramas_dict.pkl','wb'))

pickle.dump(similarity,open('similarity.pkl','wb'))





import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def recommend(drama_name, dramas, n_recommendations=5):

    tfidf = TfidfVectorizer(stop_words='english')


    dramas['Name'] = dramas['Name'].fillna('')


    tfidf_matrix = tfidf.fit_transform(dramas['Name'])


    try:
        idx = dramas[dramas['Name'].str.contains(drama_name, case=False, regex=False)].index[0]
    except IndexError:
        return "Drama not found. Please try with a different name."


    cosine_sim = cosine_similarity(tfidf_matrix[idx], tfidf_matrix).flatten()


    similar_indices = cosine_sim.argsort()[-n_recommendations:]  # Include the input drama


    recommended_dramas = dramas['Name'].iloc[similar_indices].iloc[::-1]  # Reverse to keep input drama first

    return recommended_dramas


recommendations = recommend('Goblin', dramas)
print(recommendations)

recommendations = recommend('Reply 1988', dramas)
print(recommendations)

recommendations = recommend('goblin', dramas)
print(recommendations)

